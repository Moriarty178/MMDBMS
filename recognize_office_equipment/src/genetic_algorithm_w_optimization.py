import numpy as np
import psycopg2
import psycopg2.extras
import random
import json

from tqdm import tqdm

from datetime import datetime
# K·∫øt n·ªëi PostgreSQL
def connect_db():
    return psycopg2.connect(
        dbname="recognize_office_equipment", user="postgres", password="17082002", host="localhost"
    )


# T·∫£i dataset t·ª´ PostgreSQL
def load_dataset():
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute("SELECT feature_vector, label FROM image_features")
    dataset = [(np.array(row[0]), row[1]) for row in cursor.fetchall()]
    conn.close()
    return dataset

# Kh·ªüi t·∫°o qu·∫ßn th·ªÉ
num_features = 1044  # Gi·∫£ s·ª≠ m·ªói vector c√≥ 256 ƒë·∫∑c tr∆∞ng
num_individuals = 20  # Gi·∫£m s·ªë c√° th·ªÉ trong qu·∫ßn th·ªÉ
num_generations = 50  # Gi·∫£m s·ªë th·∫ø h·ªá

def initialize_population():
    population = np.random.rand(num_individuals, num_features)
    population /= population.sum(axis=1, keepdims=True)  # Chu·∫©n h√≥a t·ªïng w = 1
    return population

# H√†m ƒë√°nh gi√° ƒë·ªô ph√π h·ª£p
def fitness(w, dataset, sample_size):
    score = 0
    # L·∫•y m·∫´u ng·∫´u nhi√™n t·ª´ dataset
    sample = random.sample(dataset, sample_size)
    for img1, label1 in sample:
        for img2, label2 in sample:
            if not np.array_equal(img1, img2):
                # d = np.sum(w * np.abs(img1 - img2))
                d = np.sum(w * (np.abs(img1 - img2) / (np.abs(img1) + np.abs(img2) + 1e-8)))
                score -= d if label1 == label2 else -d
                # if label1 == label2:
                #     score -= d  # Gi·ªØ nguy√™n
                # else:
                #     score += d  # ƒê·ªïi d·∫•u ƒë·ªÉ ƒë·∫£m b·∫£o t·ªëi ƒëa h√≥a kho·∫£ng c√°ch

    return score

# Ch·ªçn l·ªçc t·ª± nhi√™n
def select_best(population, fitness_scores, num_best=7):
    indices = np.argsort(fitness_scores)[-num_best:]
    return population[indices]

# Lai gh√©p
def crossover(parent1, parent2):
    alpha = np.random.rand(len(parent1))
    child = alpha * parent1 + (1 - alpha) * parent2
    return child / np.sum(child)

# ƒê·ªôt bi·∫øn
def mutate(child, mutation_rate=0.2):
    mutation = np.random.randn(len(child)) * mutation_rate
    child += mutation
    child = np.clip(child, 0, 1)
    return child / np.sum(child)

# Ch·∫°y Genetic Algorithm
def genetic_algorithm(num_generations=num_generations):
    dataset = load_dataset()
    population = initialize_population()

    # dataset = random.sample(dataset, 150) # fixed ƒë·ªÉ tr√°nh b·ªã bi·∫øn ƒë·ªông fitness_score d√π c√πng m·ªôt c√° th·∫ø W(w1, w2, w3, ...)

    # In th√¥ng tin dataset ƒë·ªÉ theo d√µi
    print(f"Dataset has {len(dataset)} samples.")

    print("\nüöÄ B·∫Øt ƒë·∫ßu t·ªëi ∆∞u h√≥a b·∫±ng Genetic Algorithm...\n")
    
    best_fitness = -np.inf  # Bi·∫øn l∆∞u tr·ªØ fitness t·ªët nh·∫•t
    best_population = None  # Bi·∫øn l∆∞u tr·ªØ qu·∫ßn th·ªÉ t·ªët nh·∫•t

    for generation in range(num_generations):
        start_gen_time = datetime.now()

        # T√≠nh to√°n fitness scores cho qu·∫ßn th·ªÉ hi·ªán t·∫°i
        fitness_scores = np.array([fitness(w, dataset, 100) for w in tqdm(population, desc=f"üîÑ Generation {generation + 1}")])
        
        # Ki·ªÉm tra n·∫øu fitness_scores c√≥ ph·∫ßn t·ª≠ h·ª£p l·ªá
        if fitness_scores.size == 0:
            print(f"‚ö†Ô∏è Warning: Fitness scores are empty for Generation {generation}. Skipping generation.")
            continue

        # Ch·ªçn qu·∫ßn th·ªÉ t·ªët nh·∫•t
        best_population = select_best(population, fitness_scores)

        # üî• Gi·ªØ l·∫°i c√° th·ªÉ ∆∞u t√∫ nh·∫•t
        elite = population[np.argmax(fitness_scores)]  

        # Lai gh√©p v√† ƒë·ªôt bi·∫øn ƒë·ªÉ t·∫°o ra qu·∫ßn th·ªÉ m·ªõi
        new_population = []
        for _ in range(len(population) // 2):
            p1, p2 = random.sample(list(best_population), 2)
            child = crossover(p1, p2)
            child = mutate(child)
            new_population.append(child)
        
        # ƒê·∫£m b·∫£o r·∫±ng s·ªë l∆∞·ª£ng qu·∫ßn th·ªÉ sau khi lai gh√©p v√† ƒë·ªôt bi·∫øn ƒë·ªß b·∫±ng s·ªë l∆∞·ª£ng qu·∫ßn th·ªÉ ban ƒë·∫ßu
        while len(new_population) < len(population) - 1:
            # T·∫°o th√™m c√° th·ªÉ t·ª´ qu·∫ßn th·ªÉ t·ªët nh·∫•t n·∫øu c·∫ßn thi·∫øt (ki·ªÉu nh∆∞ padding)
            new_population.append(random.choice(best_population))

        new_population.append(elite)
        population = np.array(new_population)

        # Ghi l·∫°i th·ªùi gian k·∫øt th√∫c th·∫ø h·ªá
        end_gen_time = datetime.now()
        gen_duration = end_gen_time - start_gen_time

        # Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt v·ªÅ th·∫ø h·ªá hi·ªán t·∫°i
        print(f"üìå Generation {generation + 1}:")
        print(f"   üèÜ Best fitness  = {np.max(fitness_scores):.2f}")
        print(f"   üìä Avg fitness   = {np.mean(fitness_scores):.2f}")
        print(f"   Time taken    = {str(gen_duration).split('.')[0]}\n")

        # C·∫≠p nh·∫≠t best_fitness v√† best_population n·∫øu t√¨m ƒë∆∞·ª£c c√° th·ªÉ t·ªët h∆°n
        current_best_fitness = np.max(fitness_scores)
        if current_best_fitness > best_fitness:
            best_fitness = current_best_fitness
            best_population = population[np.argmax(fitness_scores)]

    # Tr·∫£ v·ªÅ c√° th·ªÉ t·ªët nh·∫•t
    if best_population is not None:
        return population[np.argmax(fitness_scores)] # best_population
    else:
        print("‚ö†Ô∏è No valid fitness scores were computed across all generations. Unable to return the best population.")
        return None

# L∆∞u tr·ªçng s·ªë t·ªëi ∆∞u v√†o PostgreSQL
def save_best_weights(best_w):
    conn = connect_db()
    cursor = conn.cursor()

    # Chuy·ªÉn ƒë·ªïi m·∫£ng NumPy th√†nh danh s√°ch Python
    best_w_list = best_w.tolist()

    # L∆∞u tr·ªØ m·∫£ng v√†o c∆° s·ªü d·ªØ li·ªáu PostgreSQL v·ªõi ki·ªÉu REAL[]
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS optimal_weights (
            id SERIAL PRIMARY KEY,
            weights REAL[],
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    """)

    # Th·ª±c thi c√¢u l·ªánh INSERT ƒë·ªÉ l∆∞u tr·ªØ m·∫£ng REAL[] v√†o b·∫£ng
    cursor.execute("INSERT INTO optimal_weights (weights) VALUES (%s)", (best_w_list,))
    conn.commit()
    conn.close()

if __name__ == "__main__": # M·ªçi ƒëo·∫°n m√£ kh√¥ng ƒë∆∞·ª£c b·∫£o v·ªá b·ªüi "__main__" s·∫Ω ƒë∆∞·ª£c ch·∫°y ngay khi file ch√≠nh ƒë∆∞·ª£c import.
    # Ch·∫°y t·ªëi ∆∞u h√≥a
    start_time = datetime.now()

    best_w = genetic_algorithm()
    if best_w is not None:
        save_best_weights(best_w)
    else:
        print("‚ö†Ô∏è No valid best weights found, skipping save.")

    end_time = datetime.now()
    print(f"‚úÖ‚úÖ‚úÖ Ho√†n th√†nh t·ªëi ∆∞u tr·ªçng s·ªë w v√† l∆∞u v√†o PostgreSQL.\n- Start time = {start_time.strftime('%H:%M:%S %d-%m-%Y')} \n- End time = {end_time.strftime('%H:%M:%S %d-%m-%Y')}.\n- Total = {str(end_time - start_time).split('.')[0]}s." )
# print(f"=== OPTIMIZATION FINISHED ===")
# print(f"|| B·∫Øt ƒë·∫ßu l√∫c    : {start_time.strftime('%H:%M:%S')}||")
# print(f"|| K·∫øt th√∫c l√∫c   : {end_time.strftime('%H:%M:%S')}||")
# print(f"|| T·ªïng th·ªùi gian : {end_time - start_time}s||")
# print(f"==== DAY TEST {datetime.now().strftime('%d-%m-%Y')} ====")

# Ch·∫≥ng h·∫°n ch·∫°y 50 th·∫ø h·ªá - num_generations = 50, v·ªõi s·ªë c√° th·ªÉ l√† 20 - num_individuals = 20
# Khi ƒë√≥ k·∫øt qu·∫£ s·∫Ω l√†
# b·∫£ng Optimal_weights
# ID 1
# weight = 
# {
#     {},
#     {},
#     ...,
#     {} [50 c√° th·ªÉ - b·ªô tr·ªçng s·ªë w]
# }